//! LALRPOP grammar for a modified version of SPC700 assembly.
//! Note that this grammar can not parse plain SPC700 assembly, as it is not LR(1).

use miette::{SourceOffset, SourceSpan};
use lalrpop_util::ParseError;

use std::sync::{Weak, Arc};
use std::cell::RefCell;

use crate::parser::{
	instruction::{Instruction, Mnemonic, AddressingMode, Opcode},
	Environment,
	AssemblyTimeValue,
	value::{UnaryOperator, BinaryOperator},
	LabelUsageKind, 
	Token,
	Register,
	reference::{Reference, LocalLabel, MacroParent},
	try_make_direct_page_addressing_mode,
	source_range,
	program::ProgramElement,
};
use crate::directive::{DirectiveSymbol, Directive, DirectiveValue};
use crate::error::AssemblyError;
use crate::AssemblyCode;

grammar<'env, 'src>(environment: &'env Arc<RefCell<Environment>>, source_code: &'src Arc<AssemblyCode>);

pub Program: Vec<ProgramElement> = "\n"* <line:( <Line> )*> => line;

Line: ProgramElement = <label:( <LabelForInstruction> "\n"* )?> <element:InstructionOrDirective> <newlines:("\n"+)> => 
	element.set_label(label).extend_span(newlines[0].into());

InstructionOrDirective: ProgramElement = {
	InstructionWithTestComment => ProgramElement::Instruction(<>),
	DirectiveWithTestComment => ProgramElement::Directive(<>),
	<directive:"include"> <file:"string"> => ProgramElement::IncludeSource {
		file: String::from_utf8_lossy(&file.0).to_string(),
		span: source_range(directive.into(), file.1.into()),
		label: None,
	},
	MacroCall => <>,
};

MacroCall: ProgramElement = <start:"%"> <macro_name:"identifier"> "(" <arguments:Comma<AssemblyTimeValue>?> <end:")"> => ProgramElement::UserDefinedMacroCall {
	macro_name: macro_name.0,
	arguments: arguments.unwrap_or(Vec::new()),
	span: source_range(start.into(), end.into()),
	label: None
};

InstructionWithTestComment: Instruction = <mut instruction:Instruction> <expected:";="?> => {
	#[cfg(test)]
	if let Some(expected) = expected {
		instruction.expected_value = Some(expected.0);
		instruction.span = source_range(instruction.span.into(), expected.1.into());
	}
	instruction
};

DirectiveWithTestComment: Directive = <mut directive:Directive> <expected:";="?> => {
	#[cfg(test)]
	if let Some(expected) = expected {
		directive.expected_value = Some(expected.0);
		directive.span = source_range(directive.span.into(), expected.1.into());
	}
	directive
};

Instruction: Instruction = {
	<mnemonic:Mnemonic> <first_operand:AddressingMode> <second_operand:( "," <AddressingMode> )?> => Instruction {
		opcode: Opcode {
			mnemonic: mnemonic.0,
			first_operand: Some(first_operand),
			second_operand,
			force_direct_page: mnemonic.1,
		},
		span: mnemonic.2,
		..Instruction::default()
	},
	<mnemonic:Mnemonic> => Instruction {
		opcode: Opcode {
			mnemonic: mnemonic.0,
			first_operand: None,
			second_operand: None, 
			force_direct_page: mnemonic.1,
		},
		span: mnemonic.2,
		..Instruction::default()
	},
};

// The boolean specifies whether this instruction is forced to direct page addressing.
Mnemonic: (Mnemonic, bool, SourceSpan) = {
	<mnemonic:"mnemonic"> => (mnemonic.0, false, mnemonic.1),
	<mnemonic:"mnemonic"> <b:".b"> => (mnemonic.0, true, source_range(mnemonic.1.into(), b.into())),
};

Directive: Directive = {	
	<data_directive:TableDirective> <numbers:AssemblyTimeValueList> => Directive {
		value: DirectiveValue::Table {
			values: numbers,
			entry_size: match data_directive.0 {
				DirectiveSymbol::Byte | DirectiveSymbol::Db => 1,
				DirectiveSymbol::Dw | DirectiveSymbol::Word => 2,
				DirectiveSymbol::Dl => 3,
				DirectiveSymbol::Dd => 4,
				_ => unreachable!(),
			},
		},
		span: data_directive.1,
		label: None,
		expected_value: None,
	},
	<directive:"org"> <address:AssemblyTimeValue> =>? Ok(Directive {
		value: DirectiveValue::Org(address.try_value(directive, source_code.clone()).map_err(|err| ParseError::User {
			error: AssemblyError::ReferencesInDirectiveArgument {
				directive: DirectiveSymbol::Org,
				src: source_code.clone(),
				location: directive,
				// TODO: reintroduce when numbers have source locations
				// argument_location: address.source_span(),
			},
		})?),
		span: directive,
		label: None,
		expected_value: None,
	}),
	<directive:"brr"> <filename:"string"> => Directive {
		value: DirectiveValue::Brr(String::from_utf8_lossy(&filename.0).into_owned()),
		span: source_range(directive.into(), filename.1.into()),
		label: None,
		expected_value: None,
	},
	<directive:"ascii"> <text:"string"> => Directive {
		value: DirectiveValue::String { text: text.0, has_null_terminator: false },
		span: source_range(directive.into(), text.1.into()),
		label: None,
		expected_value: None,
	},
	<directive:"asciiz"> <text:"string"> => Directive {
		value: DirectiveValue::String { text: text.0, has_null_terminator: true },
		span: source_range(directive.into(), text.1.into()),
		label: None,
		expected_value: None,
	},
	<directive:"incbin"> <text:"string"> <range:InclusionRange?> => Directive {
		value: DirectiveValue::Include {
			file: String::from_utf8_lossy(&text.0).into_owned(),
			range,
		},
		span: source_range(directive.into(), text.1.into()),
		label: None,
		expected_value: None,
	},
	"end" => Directive {
		value: DirectiveValue::End,
		span: <>,
		label: None,
		expected_value: None,
	},
	"pushpc" => Directive {
		value: DirectiveValue::PushSection,
		span: <>,
		label: None,
		expected_value: None,
	},
	"pullpc" => Directive {
		value: DirectiveValue::PopSection,
		span: <>,
		label: None,
		expected_value: None,
	},
	ArchDirective,
	LabelAssignment,
	UserDefinedMacro,
};

TableDirective: (DirectiveSymbol, SourceSpan) = {
	"db" => (DirectiveSymbol::Db, <>),
	"byte" => (DirectiveSymbol::Db, <>),
	"dw" => (DirectiveSymbol::Dw, <>),
	"word" => (DirectiveSymbol::Dw, <>),
	"dl" => (DirectiveSymbol::Dl, <>),
	"dd" => (DirectiveSymbol::Dd, <>),
};

ArchDirective: Directive = <directive:"arch"> <arch:"identifier"> =>? {
	let architecture = arch.0;
	if ["spc700", "spc700-raw"].contains(&&*architecture) {
		environment.borrow().report_or_throw(AssemblyError::ArchitectureDirectiveIgnored {
			src:      source_code.clone(),
			location: source_range(directive.into(), arch.1.into()),
		}).map_err(|error| ParseError::User { error: *error }).map(|_| Directive::default())
	} else {
		Err(AssemblyError::InvalidArchitectureDirective {
			arch:     architecture,
			src:      source_code.clone(),
			location: source_range(directive.into(), arch.1.into()),
		}).map_err(|error| ParseError::User { error })
	}
};

UserDefinedMacro: Directive = <start:"macro"> <name:"identifier"> <arguments:UserDefinedMacroArguments?> "\n" <body:Program> <end:"endmacro"> => Directive {
	value: DirectiveValue::UserDefinedMacro {
		name: name.0,
		arguments: MacroParent::new_formal(arguments, name.1),
		body,
	},
	span: source_range(start.into(), end.into()),
	label: None,
	expected_value: None,
};

UserDefinedMacroArguments: Vec<(String, SourceSpan)> = {
	"(" <Comma<"identifier">> ")" => <>,
	"," <Comma<"identifier">> => <>,
};

AssemblyTimeValueList = Comma<AssemblyTimeValue>;

/// Allows both vasm and asar syntax; note that asar requires an end point.
/// vasm: `, start [, length]`
/// asar: `: start - end`
InclusionRange: SourceSpan = {
	<comma:","> <start:AssemblyTimeValue> <length:( "," <AssemblyTimeValue> )?> =>? {
		let start = usize::try_from(start.try_value(comma.into(), source_code.clone()).map_err(AssemblyError::from)?)
			.map_err(|err| AssemblyError::from_number_error(err, comma.into(), source_code.clone()))?;
		let length = usize::try_from(length.map(|length| length.try_value(comma.into(), source_code.clone())).transpose()
				.map_err(AssemblyError::from)?.unwrap_or(i64::MAX))
			.map_err(|err| AssemblyError::from_number_error(err, comma.into(), source_code.clone()))?;
		Ok((start, length).into())
	},
	<colon:":"> <start:AssemblyTimeValue> <dash:"-range-"> <end:AssemblyTimeValue> =>? {
		let colon_dash_range = source_range(colon.into(), dash.into());
		let start = usize::try_from(start.try_value(colon_dash_range, source_code.clone())
				.map_err(AssemblyError::from)?)
			.map_err(|err| AssemblyError::from_number_error(err, colon.into(), source_code.clone()))?;
		let end = usize::try_from(end.try_value(colon_dash_range, source_code.clone())
				.map_err(AssemblyError::from)?)
			.map_err(|err| AssemblyError::from_number_error(err, colon.into(), source_code.clone()))?;
		if start > end {
			Err(ParseError::User { error: AssemblyError::StartAboveEnd {
				start,
				end,
				src: source_code.clone(),
				location: source_range(colon.into(), dash.into()),
			}})
		} else {
			Ok((start, end - start).into())
		}
	},
};

LabelForInstruction: Reference = {
	"." <identifier:"identifier"> ":" => Reference::Local(
		// Create a new local label that might be merged in the future.
		Arc::new(RefCell::new(LocalLabel {
			name: identifier.0.clone(),
			location: None,
			span: identifier.1,
			// Don't rely on forward-to-backward parsing order; we can't know the parent label here.
			parent: Weak::new(),
		}))
	),
	<identifier:"identifier"> ":" => Reference::Global(environment.borrow_mut().get_global_label(&identifier.0, identifier.1, LabelUsageKind::AsDefinition)),
};

Reference: Reference = {
	<dot:"."> <identifier:"identifier"> => Reference::Local(Arc::new(RefCell::new(LocalLabel {
		name: identifier.0.clone(),
		location: None,
		span: source_range(dot.into(), identifier.1.into()),
		// Don't rely on forward-to-backward parsing order; we can't know the parent label here.
		parent: Weak::new(),
	}))),
	<identifier:"identifier"> => Reference::Global(environment.borrow_mut().get_global_label(&identifier.0, identifier.1, LabelUsageKind::AsAddress)),
	<start:"<"> <identifier:"identifier"> <end:">"> => Reference::MacroArgument {
		name: identifier.0,
		span: source_range(start.into(), end.into()),
		macro_parent: MacroParent::new_formal(None, identifier.1),
		value: None,
	}
};

LabelAssignment: Directive = <mut reference:Reference> <eq:"="> <value:AssemblyTimeValue> => {
	reference.set_location(value.clone());
	Directive {
		value: DirectiveValue::AssignReference { reference: reference.clone(), value },
		span: source_range(reference.source_span().into(), eq.into()),
		label: None,
		expected_value: None,
	}
};

AssemblyTimeValue: AssemblyTimeValue = {
	<lhs:Factor> "+" <rhs:AssemblyTimeValue> => AssemblyTimeValue::BinaryOperation(Box::new(lhs), Box::new(rhs), BinaryOperator::Add),
	<lhs:Factor> "-" <rhs:AssemblyTimeValue> => AssemblyTimeValue::BinaryOperation(Box::new(lhs), Box::new(rhs), BinaryOperator::Subtract),
	Factor,
};

Factor: AssemblyTimeValue = {
	<lhs:Factor> "*" <rhs:Exponential> => AssemblyTimeValue::BinaryOperation(Box::new(lhs), Box::new(rhs), BinaryOperator::Multiply),
	<lhs:Factor> "/" <rhs:Exponential> => AssemblyTimeValue::BinaryOperation(Box::new(lhs), Box::new(rhs), BinaryOperator::Divide),
	<lhs:Factor> "%" <rhs:Exponential> => AssemblyTimeValue::BinaryOperation(Box::new(lhs), Box::new(rhs), BinaryOperator::Modulus),
	Exponential,
};

/// Note that the sub-expressions are the other way around, as exponentials have right-to-left operator precedence!
Exponential: AssemblyTimeValue = {
	<lhs:Term> "**" <rhs:Exponential> => AssemblyTimeValue::BinaryOperation(Box::new(lhs), Box::new(rhs), BinaryOperator::Exponentiation),
	Term,
}

Term: AssemblyTimeValue = {
	"number" => AssemblyTimeValue::Literal(<>.0),
	"+" <Term>,
	"-" <Term> => AssemblyTimeValue::UnaryOperation(Box::new(<>), UnaryOperator::Negate),
	"(" <AssemblyTimeValue> ")",
	Reference => AssemblyTimeValue::Reference(<>),
};

AddressingMode: AddressingMode = {
	<AssemblyTimeValue> => try_make_direct_page_addressing_mode(<>, AddressingMode::DirectPage, AddressingMode::Address),
	"#" <AssemblyTimeValue> => AddressingMode::Immediate(<>),
	"A" => AddressingMode::Register(Register::A),
	"X" => AddressingMode::Register(Register::X),
	"Y" => AddressingMode::Register(Register::Y),
	"SP" => AddressingMode::Register(Register::SP),
	"PSW" => AddressingMode::Register(Register::PSW),
	"YA" => AddressingMode::Register(Register::YA),
	"C" => AddressingMode::CarryFlag,
	<AssemblyTimeValue> "+X" => try_make_direct_page_addressing_mode(<>, AddressingMode::DirectPageXIndexed, AddressingMode::XIndexed),
	<AssemblyTimeValue> "+Y" => try_make_direct_page_addressing_mode(<>, AddressingMode::DirectPageYIndexed, AddressingMode::YIndexed),
	"[" <AssemblyTimeValue> "+X" "]" => try_make_direct_page_addressing_mode(<>, AddressingMode::DirectPageXIndexedIndirect, AddressingMode::DirectPageXIndexedIndirect),
	"[" <AssemblyTimeValue> "]" "+Y" => try_make_direct_page_addressing_mode(<>, AddressingMode::DirectPageIndirectYIndexed, AddressingMode::DirectPageIndirectYIndexed),
	<AssemblyTimeValue> "." <"number"> =>? try_make_direct_page_addressing_mode((<>),
		|(a, b)| Ok(AddressingMode::DirectPageBit(a, AddressingMode::check_bit(b.0 as u8, b.1, &source_code)?)),
		|(a, b)| Ok(AddressingMode::AddressBit(a, AddressingMode::check_bit(b.0 as u8, b.1, &source_code)?))),
	"/" <address:AssemblyTimeValue> "." <bit:"number"> =>? Ok(AddressingMode::NegatedAddressBit(address, AddressingMode::check_bit(bit.0 as u8, bit.1, &source_code)?)),
	"[" "X" "]" "+" => AddressingMode::IndirectXAutoIncrement,
	"[" "X" "+" "]" => AddressingMode::IndirectXAutoIncrement,
	"[" "X" "]" => AddressingMode::IndirectX,
	"[" "Y" "]" => AddressingMode::IndirectY,
};

Comma<T>: Vec<T> = {
	<mut v:(<T> ",")*> <e:T> => {
		v.push(e);
		v
	}
};

/// Lexer API information so that LALRPOP uses the spcasm lexer found in lexer.rs
extern {
	/// We provide this from the Token information.
	type Location = usize;
	type Error = AssemblyError;

	enum Token {
		"identifier" => Token::Identifier(<String>, <SourceSpan>),
		"mnemonic" => Token::Mnemonic(<Mnemonic>, <SourceSpan>),
		"A" => Token::Register(Register::A, <SourceSpan>),
		"X" => Token::Register(Register::X, <SourceSpan>),
		"Y" => Token::Register(Register::Y, <SourceSpan>),
		"+X" => Token::PlusRegister(Register::X, <SourceSpan>),
		"+Y" => Token::PlusRegister(Register::Y, <SourceSpan>),
		"SP" => Token::Register(Register::SP, <SourceSpan>),
		"PSW" => Token::Register(Register::PSW, <SourceSpan>),
		"YA" => Token::Register(Register::YA, <SourceSpan>),
		"C" => Token::Register(Register::C, <SourceSpan>),
		"org" => Token::Directive(DirectiveSymbol::Org, <SourceSpan>),
		"db" => Token::Directive(DirectiveSymbol::Db, <SourceSpan>),
		"byte" => Token::Directive(DirectiveSymbol::Byte, <SourceSpan>),
		"dw" => Token::Directive(DirectiveSymbol::Dw, <SourceSpan>),
		"word" => Token::Directive(DirectiveSymbol::Word, <SourceSpan>),
		"dl" => Token::Directive(DirectiveSymbol::Dl, <SourceSpan>),
		"dd" => Token::Directive(DirectiveSymbol::Dd, <SourceSpan>),
		"ascii" => Token::Directive(DirectiveSymbol::Ascii, <SourceSpan>),
		"asciiz" => Token::Directive(DirectiveSymbol::Asciiz, <SourceSpan>),
		"incbin" => Token::Directive(DirectiveSymbol::Incbin, <SourceSpan>),
		"include" => Token::Directive(DirectiveSymbol::Include, <SourceSpan>),
		"end" => Token::Directive(DirectiveSymbol::End, <SourceSpan>),
		"brr" => Token::Directive(DirectiveSymbol::Brr, <SourceSpan>),
		"pushpc" => Token::Directive(DirectiveSymbol::Pushpc, <SourceSpan>),
		"pullpc" => Token::Directive(DirectiveSymbol::Pullpc, <SourceSpan>),
		"arch" => Token::Directive(DirectiveSymbol::Arch, <SourceSpan>),
		"macro" => Token::Directive(DirectiveSymbol::Macro, <SourceSpan>),
		"endmacro" => Token::Directive(DirectiveSymbol::EndMacro, <SourceSpan>),
		"number" => Token::Number(<i64>, <SourceSpan>),
		"string" => Token::String(<Vec<u8>>, <SourceSpan>),
		"#" => Token::Hash(<SourceOffset>),
		"," => Token::Comma(<SourceOffset>),
		"+" => Token::Plus(<SourceOffset>),
		"*" => Token::Star(<SourceOffset>),
		"**" => Token::DoubleStar(<SourceSpan>),
		"-" => Token::Minus(<SourceOffset>),
		"-range-" => Token::RangeMinus(<SourceOffset>),
		"/" => Token::Slash(<SourceOffset>),
		"(" => Token::OpenParenthesis(<SourceOffset>),
		")" => Token::CloseParenthesis(<SourceOffset>),
		"[" => Token::OpenIndexingParenthesis(<SourceOffset>),
		"]" => Token::CloseIndexingParenthesis(<SourceOffset>),
		"<" => Token::OpenAngleBracket(<SourceOffset>),
		">" => Token::CloseAngleBracket(<SourceOffset>),
		"%" => Token::Percent(<SourceOffset>),
		":" => Token::Colon(<SourceOffset>),
		"." => Token::Period(<SourceOffset>),
		".b" => Token::ExplicitDirectPage(<SourceSpan>),
		"=" => Token::Equals(<SourceOffset>),
		"\n" => Token::Newline(<SourceOffset>),
		// Do this once/if LALRPOP supports it
		// #[cfg(test)]
		";=" => Token::TestComment(<Vec<u8>>, <SourceSpan>),
	}
}
